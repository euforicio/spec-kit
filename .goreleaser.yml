# GoReleaser configuration for spec-kit
version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy

builds:
  - id: specify
    main: ./cmd/specify
    binary: specify
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    # Custom ldflags
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.buildTime={{.Date}}

archives:
  - id: default
    format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

release:
  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  prerelease: auto

  # Header template for the release body.
  header: |
    ## Specify CLI {{.Tag}}
    
    Fast, cross-platform CLI for spec-driven development written in Go.
    
    ### ðŸš€ CLI Binaries
    
    Download the appropriate binary for your platform:

  # Footer template for the release body.
  footer: |
    ### ðŸ“‹ Usage
    
    ```bash
    # Download and install (example for macOS Apple Silicon)
    curl -L https://github.com/euforicio/spec-kit/releases/download/{{.Tag}}/specify_Darwin_arm64.tar.gz | tar -xz
    chmod +x specify
    sudo mv specify /usr/local/bin/
    
    # Initialize a new project
    specify init my-project --ai claude
    
    # Check your environment
    specify check
    ```

checksum:
  name_template: 'checksums.txt'

snapshot:
  name_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^ci:'
      - '^build:'
      - '^style:'
      - '^refactor:'
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: 'Bug fixes'
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: 'Performance improvements'
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: Others
      order: 999

# The lines beneath this are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj