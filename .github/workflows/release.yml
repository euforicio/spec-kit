name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create template packages
        run: |
          # Create base package directory structure in temp
          mkdir -p /tmp/sdd-package-base
          
          # Copy common folders to base
          if [ -d "memory" ]; then
            cp -r memory /tmp/sdd-package-base/
            echo "Copied memory folder"
          fi
          
          if [ -d "templates" ]; then
            mkdir -p /tmp/sdd-package-base/templates
            # Copy templates folder but exclude the commands directory
            find templates -type f -not -path "templates/commands/*" -exec cp --parents {} /tmp/sdd-package-base/ \;
            echo "Copied templates folder (excluding commands directory)"
          fi
          
          # Generate command files for each agent from source templates
          generate_commands() {
            local agent=$1
            local ext=$2
            local arg_format=$3
            local output_dir=$4
            
            mkdir -p "$output_dir"
            
            for template in templates/commands/*.md; do
              if [[ -f "$template" ]]; then
                name=$(basename "$template" .md)
                description=$(awk '/^description:/ {gsub(/^description: *"?/, ""); gsub(/"$/, ""); print; exit}' "$template" | tr -d '\r')
                content=$(awk '/^---$/{if(++count==2) start=1; next} start' "$template" | sed "s/{ARGS}/$arg_format/g")
                
                case $ext in
                  "toml")
                    {
                      echo "description = \"$description\""
                      echo ""
                      echo "prompt = \"\"\""
                      echo "$content"
                      echo "\"\"\""
                    } > "$output_dir/$name.$ext"
                    ;;
                  "md")
                    echo "$content" > "$output_dir/$name.$ext"
                    ;;
                  "prompt.md")
                    {
                      echo "# $(echo "$description" | sed 's/\. .*//')"
                      echo ""
                      echo "$content"
                    } > "$output_dir/$name.$ext"
                    ;;
                esac
              fi
            done
          }
          
          # Create Claude Code package
          mkdir -p /tmp/sdd-claude-package
          cp -r /tmp/sdd-package-base/* /tmp/sdd-claude-package/
          mkdir -p /tmp/sdd-claude-package/.claude/commands
          generate_commands "claude" "md" "\$ARGUMENTS" "/tmp/sdd-claude-package/.claude/commands"
          echo "Created Claude Code package"
          
          # Create Gemini CLI package  
          mkdir -p /tmp/sdd-gemini-package
          cp -r /tmp/sdd-package-base/* /tmp/sdd-gemini-package/
          mkdir -p /tmp/sdd-gemini-package/.gemini/commands
          generate_commands "gemini" "toml" "{{args}}" "/tmp/sdd-gemini-package/.gemini/commands"
          if [ -f "agent_templates/gemini/GEMINI.md" ]; then
            cp agent_templates/gemini/GEMINI.md /tmp/sdd-gemini-package/GEMINI.md
          fi
          echo "Created Gemini CLI package"
          
          # Create GitHub Copilot package
          mkdir -p /tmp/sdd-copilot-package
          cp -r /tmp/sdd-package-base/* /tmp/sdd-copilot-package/
          mkdir -p /tmp/sdd-copilot-package/.github/prompts
          generate_commands "copilot" "prompt.md" "\$ARGUMENTS" "/tmp/sdd-copilot-package/.github/prompts"
          echo "Created GitHub Copilot package"
          
          # Create archive files for each package
          cd /tmp/sdd-claude-package && zip -r /tmp/spec-kit-template-claude.zip . && cd -
          cd /tmp/sdd-gemini-package && zip -r /tmp/spec-kit-template-gemini.zip . && cd -
          cd /tmp/sdd-copilot-package && zip -r /tmp/spec-kit-template-copilot.zip . && cd -

      - name: Upload template packages to release
        run: |
          # Get the latest release tag
          TAG=$(git describe --tags --abbrev=0)
          
          # Upload template packages as additional assets
          gh release upload $TAG \
            /tmp/spec-kit-template-claude.zip \
            /tmp/spec-kit-template-gemini.zip \
            /tmp/spec-kit-template-copilot.zip \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}