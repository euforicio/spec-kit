name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Create cache template package
        run: |
          # Create cache template package with unified structure
          mkdir -p /tmp/cache-template-package/{memory,.claude/commands,templates}
          
          # Copy memory files from templates/memory
          if [ -d "templates/memory" ]; then
            cp templates/memory/*.md /tmp/cache-template-package/memory/
            echo "Copied memory files to cache template"
          fi
          
          # Copy command files (from templates/commands) to .claude/commands
          if [ -d "templates/commands" ]; then
            cp templates/commands/*.md /tmp/cache-template-package/.claude/commands/
            echo "Copied command files to cache template (.claude/commands)"
          fi
          
          # Copy template files (excluding commands and memory directories)
          if [ -d "templates" ]; then
            find templates -maxdepth 1 -name "*.md" -exec cp {} /tmp/cache-template-package/templates/ \;
            echo "Copied template files to cache template"
          fi
          
          # Generate manifest.json with file hashes
          echo "Generating manifest.json..."
          TAG=$(git describe --tags --abbrev=0)
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          cd /tmp/cache-template-package
          
          # Create a temporary file for the templates section
          TEMP_TEMPLATES=$(mktemp)
          
          # Calculate hashes for all files
          find . -type f -name "*.md" | sort | while read file; do
            # Remove leading ./
            RELATIVE_PATH=${file#./}
            # Calculate SHA256 hash
            HASH=$(sha256sum "$file" | cut -d' ' -f1)
            echo "    \"$RELATIVE_PATH\": \"$HASH\"" >> "$TEMP_TEMPLATES"
          done
          
          # Build the complete manifest JSON
          cat > .manifest.json << EOF
          {
            "spec_kit_version": "$TAG",
            "last_sync": "$TIMESTAMP",
            "templates": {
          $(cat "$TEMP_TEMPLATES" | sed '$!s/$/,/')
            }
          }
          EOF
          
          # Clean up temp file
          rm "$TEMP_TEMPLATES"
          
          echo "Generated manifest.json with $(find . -name "*.md" | wc -l) files"
          echo "Manifest contents:"
          cat .manifest.json
          cd -
          
          # Create the cache template ZIP
          cd /tmp/cache-template-package && zip -r /tmp/spec-kit-cache-template.zip . && cd -
          echo "Created cache template package with manifest"

      - name: Upload template packages to release
        run: |
          # Get the latest release tag
          TAG=$(git describe --tags --abbrev=0)
          
          # Upload cache template package as additional asset
          gh release upload $TAG \
            /tmp/spec-kit-cache-template.zip \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
